#//Recuperar Bashrc//
# cp /etc/skel/.bashrc ~/


f_random_array () {
   array=( $(echo $@) )
   local r=${#array[@]}
   local i=$RANDOM
   let "i %= $r"
   # move element $i to the end of the array
   if [ $i -ne 0 ]; then
      array=( ${array[@]:0:$i} ${array[@]:$(($i + 1))} ${array[$i]} )
   else
      array=( ${array[@]:$(($i + 1))} ${array[$i]} )
   fi
   echo ${array[@]}
}

f_random_prompt () {
  # this is the pool of colours from which 3 random colours are chosen
  spectrum=( $(echo 31 32 33 34 35 36) )
  my_spectrum=( $(echo 0 0 0 0) )
  local n;local i=0;while [ $i -le 3 ]; do
    spectrum=( $(f_random_array ${spectrum[@]}) )
    n=$((${#spectrum[@]} - 1))
    my_spectrum[$i]=${spectrum[$n]}
    spectrum=( ${spectrum[@]:0:$n} )
    i=$(($i+1))
  done
}

f_set_colour_prompt () {
  local a='\[\033[1;${my_spectrum[0]}m\]\u@\[\033[1;'
  local b='${my_spectrum[1]}m\]\h:\[\033[1;${my_spectrum[2]}m\]\W:\[\033[1;'
  local c='${my_spectrum[3]}m\]''$?\$ ''\[\033[1;0m\]'"$PWD_IN_TITLE"
  PS1="${a}${b}${c}"
}

export -f f_random_array f_random_prompt f_set_colour_prompt

# Colour options
COLOUR_PROMPT=3
#  0 = no colours
#  1 = no random colours
#  2 = random colours every shell session
#  3 = random colours after every new command

# comment out if you do not want pwd displayed in title bar
[ $TERM = xterm ] && PWD_IN_TITLE='\[\e]0;\h:\w\a\]'

case $COLOUR_PROMPT in
1)
  # default colours
  my_spectrum=( $(echo 31 32 36 33) );f_set_colour_prompt
  ;;
2)
  # random colours every shell session
  f_random_prompt;f_set_colour_prompt
  ;;
3)
  # random colours after every new command
  export -f f_random_array f_random_prompt f_set_colour_prompt
  f_random_prompt;f_set_colour_prompt
  export PROMPT_COMMAND='f_random_prompt;f_set_colour_prompt'
  ;;
*)
  export PS1='\[\033[1;0m\]\u@\h \W:$?\$ '"$PWD_IN_TITLE"
  ;;
esac


# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#p√°ginas web
alias gmail='open https://mail.google.com'
alias google='open https://www.google.com'
alias ifp='open https://oncampus.ifp.es'
alias youtube='open https://www.youtube.com'
alias help='open https://git.io/linux'

#grep
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'

#comprimir
alias comprimir='tar -cf'
alias descomprimir='tar -xf'

#otros
alias install='sudo apt-get install'
alias actualizar='sudo apt update && sudo apt upgrade'
alias ip='ifconfig -a'
alias ini='cd ~'
alias t='tree'
alias reiniciar='shutdown -r 0'
alias apagar='shutdown now'
alias so='lsb_release -a'
alias mk='mkdir -p'
alias chmod='sudo chmod'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

